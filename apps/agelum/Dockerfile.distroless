# syntax=docker/dockerfile:1.4

# ===============================
# ULTRA-MINIMAL NEXT.JS DOCKERFILE
# Uses standalone output + distroless for smallest possible size
# ===============================

# Build stage
FROM node:22-alpine AS builder

# Install necessary packages for building
RUN apk add --no-cache libc6-compat

# Install pnpm globally
RUN npm install -g pnpm turbo typescript

WORKDIR /app

# Copy package files for dependency resolution
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./
COPY package.json ./
COPY turbo.json ./
COPY apps/agelum/package.json ./apps/agelum/
COPY packages/agelum-db/package.json ./packages/agelum-db/
COPY packages/agelum-ai/package.json ./packages/agelum-ai/
COPY packages/drizzle-reactive/package.json ./packages/drizzle-reactive/
COPY packages/logger/package.json ./packages/logger/

# Install dependencies with cache mount
RUN --mount=type=cache,id=pnpm-store,target=/root/.pnpm-store \
    pnpm install --frozen-lockfile --prod=false --shamefully-hoist

# Copy source code
COPY . .

# Build the application (creates standalone output)
RUN pnpm build:agelum:prod

# ===============================
# Production stage - Distroless (smallest possible)
# ===============================
FROM gcr.io/distroless/nodejs22-debian12 AS runner

WORKDIR /app

# Set environment
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Copy standalone output (this contains everything needed to run!)
COPY --from=builder /app/apps/agelum/.next/standalone ./
COPY --from=builder /app/apps/agelum/.next/static ./apps/agelum/.next/static
COPY --from=builder /app/apps/agelum/public ./apps/agelum/public

# The distroless image runs as non-root by default
USER 1001:1001

EXPOSE 3000

# Start the standalone server (distroless doesn't have shell, so direct node call)
CMD ["apps/agelum/server.js"]

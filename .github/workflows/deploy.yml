name: Deploy to Self-Hosted Server

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set commit SHA as output
        id: set_tag
        run: echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/teamhub/Dockerfile
          push: true
          tags: |
            facundofierro/teamhub:latest
            facundofierro/teamhub:${{ steps.set_tag.outputs.tag }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

  deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout only docker-stack.yml
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-stack.yml
          sparse-checkout-cone-mode: false

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Update docker-stack.yml with new image tag
        run: |
          sed -i "s|facundofierro/teamhub:.*|facundofierro/teamhub:${{ needs.build-and-push.outputs.tag }}|" docker-stack.yml

      - name: Pull and deploy Docker image
        run: |
          docker pull facundofierro/teamhub:${{ needs.build-and-push.outputs.tag }}
          export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
          docker stack deploy -c docker-stack.yml teamhub

      - name: Prune stopped containers
        run: docker container prune -f

      - name: Ensure Pinggy tunnel is running
        run: |
          if ! docker ps --filter "name=pinggy-tunnel" --filter "status=running" | grep pinggy-tunnel; then
            docker rm -f pinggy-tunnel || true
            docker run --net=host --name pinggy-tunnel -d pinggy/pinggy -p 443 -R0:192.168.88.135:3000 -o StrictHostKeyChecking=no -o ServerAliveInterval=30 FpyP2PGUXy0@pro.pinggy.io
          else
            echo "Pinggy tunnel is already running."
          fi

version: '3.8'
services:
  # PostgreSQL database for teamhub
  postgres:
    image: ${POSTGRES_PGVECTOR_IMAGE:-ghcr.io/facundofierro/postgres-pgvector:latest}
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=teamhub
      - POSTGRES_USER=teamhub
      - POSTGRES_PASSWORD=${PG_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      teamhub_network:
        aliases:
          - postgres

  # Redis cache for teamhub
  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    volumes:
      - redis_data:/data
    networks:
      teamhub_network:
        aliases:
          - redis

  # Add nginx reverse proxy service
  nginx:
    image: nginx:alpine
    deploy:
      replicas: 1
    ports:
      - '80:80'
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
    networks:
      teamhub_network:
        aliases:
          - nginx
    depends_on:
      - teamhub
      - posthog
      - nextcloud
      - remotion

  # Remotion rendering service
  remotion:
    image: ${REMOTION_IMAGE:-ghcr.io/facundofierro/kadiel-learning/remotion-render:latest}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
    environment:
      - NODE_ENV=production
      # Add any environment variables your remotion service needs
    networks:
      teamhub_network:
        aliases:
          - remotion

  teamhub:
    image: localhost:5000/teamhub:latest
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
    environment:
      - NODE_ENV=production
      - PG_PASSWORD=${PG_PASSWORD}
      - POSTGRES_URL=postgresql://teamhub:${PG_PASSWORD}@postgres:5432/teamhub
      - REDIS_URL=redis://redis:6379
      # Add other env vars here, or use secrets/configs
    networks:
      teamhub_network:
        aliases:
          - teamhub
    depends_on:
      - postgres
      - redis

  nextcloud:
    image: nextcloud:latest
    deploy:
      replicas: 1
    environment:
      - NEXTCLOUD_ADMIN_USER=admin
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD:-admin123}
      - NEXTCLOUD_TRUSTED_DOMAINS=r1.teamxagents.com localhost
      - OVERWRITEPROTOCOL=https
      - OVERWRITEHOST=r1.teamxagents.com
      - OVERWRITEWEBROOT=/nextcloud
      - POSTGRES_HOST=nextcloud_db
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD:-nextcloud123}
    volumes:
      - nextcloud_data:/var/www/html
    networks:
      teamhub_network:
        aliases:
          - nextcloud
    depends_on:
      - nextcloud_db

  nextcloud_db:
    image: postgres:15
    deploy:
      replicas: 1
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD:-nextcloud123}
    volumes:
      - nextcloud_db_data:/var/lib/postgresql/data
    networks:
      teamhub_network:
        aliases:
          - nextcloud_db

  # DISABLED: Browser Service
  # browser-service:
  #   image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/browser-service:latest
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #       order: start-first
  #     rollback_config:
  #       parallelism: 1
  #       delay: 10s
  #   environment:
  #     - NODE_ENV=production
  #   ports:
  #     - '4000:4000'
  #   networks:
  #     - teamhub_network

  # ClickHouse for PostHog Analytics
  # ZooKeeper for ClickHouse cluster coordination
  zookeeper:
    image: zookeeper:3.8
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=zookeeper:2888:3888;2181
    volumes:
      - zookeeper_data:/data
      - zookeeper_logs:/logs
    networks:
      teamhub_network:
        aliases:
          - zookeeper
    healthcheck:
      test: ['CMD', 'zkCli.sh', 'ls', '/']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    environment:
      - CLICKHOUSE_DB=posthog
      - CLICKHOUSE_USER=posthog
      - CLICKHOUSE_PASSWORD=${POSTHOG_CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    ports:
      - '8123:8123' # HTTP interface
      - '9000:9000' # Native protocol
      - '9440:9440' # Secure native protocol
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
      - ./infrastructure/configs/clickhouse-config.xml:/etc/clickhouse-server/config.d/posthog-config.xml:ro
    networks:
      teamhub_network:
        aliases:
          - clickhouse
    depends_on:
      - zookeeper
    healthcheck:
      test: ['CMD', 'clickhouse-client', '--query', 'SELECT 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostHog Analytics Platform
  posthog:
    image: posthog/posthog:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
    environment:
      - POSTGRES_HOST=posthog_db
      - POSTGRES_DB=posthog
      - POSTGRES_USER=posthog
      - POSTGRES_PASSWORD=${POSTHOG_DB_PASSWORD}
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql://posthog:${POSTHOG_DB_PASSWORD}@posthog_db:5432/posthog
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_USER=posthog
      - CLICKHOUSE_PASSWORD=${POSTHOG_CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DATABASE=posthog
      - CLICKHOUSE_SECURE=false
      - CLICKHOUSE_VERIFY=false
      - CLICKHOUSE_CLUSTER_ENABLED=false
      - CLICKHOUSE_REPLICATION=false
      - SKIP_ASYNC_MIGRATIONS_SETUP=1
      - CLICKHOUSE_HTTP_URL=http://clickhouse:8123
      - REDIS_URL=redis://posthog_redis:6379
      - SECRET_KEY=${POSTHOG_SECRET_KEY}
      - SITE_URL=${POSTHOG_SITE_URL}
      - DISABLE_SECURE_SSL_REDIRECT=true
      - NODE_ENV=production
    ports:
      - '8000:8000'
    volumes:
      - posthog_data:/app/media
    networks:
      teamhub_network:
        aliases:
          - posthog
    depends_on:
      - posthog_db
      - posthog_redis
      - clickhouse
      - zookeeper
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostHog PostgreSQL Database
  posthog_db:
    image: postgres:15
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    environment:
      - POSTGRES_DB=posthog
      - POSTGRES_USER=posthog
      - POSTGRES_PASSWORD=${POSTHOG_DB_PASSWORD}
    volumes:
      - posthog_db_data:/var/lib/postgresql/data
    networks:
      teamhub_network:
        aliases:
          - posthog_db

  # PostHog Redis Cache
  posthog_redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    volumes:
      - posthog_redis_data:/data
    networks:
      teamhub_network:
        aliases:
          - posthog_redis

configs:
  nginx_config:
    external: true
    name: ${NGINX_CONFIG_NAME:-teamhub_nginx_config_v1}

volumes:
  postgres_data:
  redis_data:
  nextcloud_data:
  nextcloud_db_data:
  posthog_data:
  posthog_db_data:
  posthog_redis_data:
  clickhouse_data:
  clickhouse_logs:
  zookeeper_data:
  zookeeper_logs:

networks:
  teamhub_network:
    driver: overlay
    external: true

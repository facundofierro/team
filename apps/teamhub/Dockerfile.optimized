# syntax=docker/dockerfile:1.4

# ===============================
# OPTIMIZED NEXT.JS DOCKERFILE
# Uses standalone output for minimal container size
# ===============================

# Build stage
FROM node:22-alpine AS builder

# Install necessary packages
RUN apk add --no-cache libc6-compat

# Install pnpm globally
RUN npm install -g pnpm turbo

WORKDIR /app

# Copy package files for dependency resolution
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./
COPY package.json ./
COPY turbo.json ./
COPY apps/teamhub/package.json ./apps/teamhub/
COPY packages/teamhub-db/package.json ./packages/teamhub-db/
COPY packages/teamhub-ai/package.json ./packages/teamhub-ai/

# Install dependencies with cache mount
RUN --mount=type=cache,id=pnpm-store,target=/root/.pnpm-store \
    pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the application (creates standalone output)
RUN pnpm build:teamhub:prod

# ===============================
# Production stage - Ultra minimal
# ===============================
FROM node:22-alpine AS runner

# Install security updates and dumb-init for proper signal handling
RUN apk add --no-cache dumb-init && \
    apk upgrade

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

WORKDIR /app

# Set environment
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Copy standalone output (this contains everything needed to run!)
COPY --from=builder --chown=nextjs:nodejs /app/apps/teamhub/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/teamhub/.next/static ./apps/teamhub/.next/static
COPY --from=builder --chown=nextjs:nodejs /app/apps/teamhub/public ./apps/teamhub/public

# Switch to non-root user
USER nextjs

EXPOSE 3000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the standalone server
CMD ["node", "apps/teamhub/server.js"]

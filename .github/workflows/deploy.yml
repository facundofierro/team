name: Deploy to Self-Hosted Server

on:
  push:
    branches:
      - main

jobs:
  prepare-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Set commit SHA as output
        id: set_tag
        run: echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  setup-registry:
    runs-on: self-hosted
    needs: prepare-tag
    steps:
      - name: Checkout only required files
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-stack.yml
            setup-registry.sh
          sparse-checkout-cone-mode: false

      - name: Deploy infrastructure services (nginx + registry)
        run: |
          # Check if registry volumes exist
          if ! docker volume ls --filter name=registry_data --format "{{.Name}}" | grep -q registry_data; then
            echo "Registry volumes not found. Running setup script..."
            chmod +x setup-registry.sh
            ./setup-registry.sh
          fi

                    # Create simplified nginx config for infrastructure phase (registry only)
          cat > nginx-infra.conf << 'EOF'
          events {
              worker_connections 1024;
          }

          http {
              upstream registry {
                  server registry:5000;
              }

              server {
                  listen 80;
                  server_name _;

                  # Default response for root path during infrastructure phase
                  location = / {
                      return 200 'Infrastructure services running. Registry available at /v2/\n';
                      add_header Content-Type text/plain;
                  }

                  # Docker registry
                  location /v2/ {
                      proxy_pass http://registry;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;

                      # Docker registry specific headers
                      proxy_set_header X-Forwarded-Host $host;
                      proxy_buffering off;
                      client_max_body_size 0;
                  }

                  # Health check endpoint
                  location /health {
                      return 200 'OK\n';
                      add_header Content-Type text/plain;
                  }
              }
          }
          EOF

          # Create a temporary stack file with only infrastructure services
          cat > docker-stack-infra.yml << 'EOF'
          version: '3.8'
          services:
            nginx:
              image: nginx:alpine
              deploy:
                replicas: 1
              ports:
                - '80:80'
                - '443:443'
              configs:
                - source: nginx_config
                  target: /etc/nginx/nginx.conf
              networks:
                - registry_network

            registry:
              image: registry:2
              deploy:
                replicas: 1
                placement:
                  constraints:
                    - node.role == manager
              expose:
                - "5000"
              environment:
                - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry
                - REGISTRY_AUTH=htpasswd
                - REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm
                - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd
              volumes:
                - registry_data:/var/lib/registry
                - registry_auth:/auth
              networks:
                - registry_network

          configs:
            nginx_config:
              file: ./nginx-infra.conf

          volumes:
            registry_data:
            registry_auth:

          networks:
            registry_network:
              driver: overlay
          EOF

          # Deploy infrastructure services only
          echo "Deploying infrastructure services (nginx + registry)..."
          export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
          docker stack deploy -c docker-stack-infra.yml teamhub-infra

          echo "Waiting for infrastructure services to be ready..."
          sleep 30

          # Wait for registry to be accessible
          for i in {1..15}; do
            if curl -f --connect-timeout 5 --max-time 10 -u docker:k8mX9pL2nQ7vR4wE http://127.0.0.1:5000/v2/ >/dev/null 2>&1; then
              echo "✅ Registry is accessible"
              break
            fi
            echo "Waiting for registry to be ready... (attempt $i/15)"
            sleep 10
          done

          # Final check
          if ! curl -f --connect-timeout 5 --max-time 10 -u docker:k8mX9pL2nQ7vR4wE http://127.0.0.1:5000/v2/ >/dev/null 2>&1; then
            echo "❌ Registry is still not accessible after 2.5 minutes"
            docker service ls
            docker service logs teamhub-infra_registry --tail 20
            exit 1
          fi

      - name: Ensure Pinggy tunnel is running
        run: |
          # Single tunnel with wildcard domain forwarding
          if ! docker ps --filter "name=pinggy-tunnel" --filter "status=running" --format "{{.Names}}" | grep -q "^pinggy-tunnel$"; then
            echo "Wildcard tunnel not running, setting it up..."
            docker stop pinggy-tunnel 2>/dev/null || true
            docker rm pinggy-tunnel 2>/dev/null || true
            # Single tunnel through nginx reverse proxy
            # All services accessible through port 80 with path-based routing
            docker run --net=host --name=pinggy-tunnel -d pinggy/pinggy \
              -p 443 \
              -R0:127.0.0.1:80 \
              -o StrictHostKeyChecking=no -o ServerAliveInterval=30 \
              FpyP2PGUXy0@pro.pinggy.io
            echo "Waiting for wildcard tunnel to be ready..."
            sleep 15

            # Show tunnel information
            echo "Tunnel logs:"
            docker logs pinggy-tunnel 2>/dev/null | tail -20 || echo "No logs available yet"

            echo "Waiting additional time for all ports to be mapped..."
            sleep 10
            echo "Final tunnel status:"
            docker logs pinggy-tunnel 2>/dev/null | tail -30 || echo "No logs available yet"
          else
            echo "Wildcard Pinggy tunnel is already running."
          fi

          # Clean up any orphaned pinggy containers (containers without proper names)
          echo "Cleaning up orphaned pinggy containers..."
          docker ps -a --filter "ancestor=pinggy/pinggy" --format "{{.Names}}" | grep -v -E "^pinggy-tunnel$" | xargs -r docker rm -f

  build-and-push:
    runs-on: ubuntu-latest
    needs: [prepare-tag, setup-registry]
    outputs:
      tag: ${{ needs.prepare-tag.outputs.tag }}
    env:
      # Registry accessible from GitHub via nginx reverse proxy
      # Docker registry accessible via /v2/ path on the main domain
      REGISTRY_DOMAIN: 'r1.teamxagents.com'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/teamhub/Dockerfile
          push: false
          tags: |
            teamhub:latest
            teamhub:${{ needs.prepare-tag.outputs.tag }}
          outputs: type=docker,dest=/tmp/teamhub.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: teamhub-image
          path: /tmp/teamhub.tar
          retention-days: 1

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Test DNS and connectivity before login
        run: |
          echo "Testing DNS resolution for $REGISTRY_DOMAIN..."

          # Test DNS resolution
          if nslookup $REGISTRY_DOMAIN; then
            echo "✅ DNS resolution successful"
          else
            echo "❌ DNS resolution failed"
            exit 1
          fi

          # Test basic connectivity
          echo "Testing basic connectivity to $REGISTRY_DOMAIN..."
          if curl -I --connect-timeout 10 --max-time 30 https://$REGISTRY_DOMAIN 2>/dev/null; then
            echo "✅ HTTPS connection successful"
          else
            echo "⚠️ HTTPS connection failed, trying HTTP..."
            if curl -I --connect-timeout 10 --max-time 30 http://$REGISTRY_DOMAIN 2>/dev/null; then
              echo "✅ HTTP connection successful"
            else
              echo "❌ Both HTTP and HTTPS connections failed"
            fi
          fi

          # Test registry endpoint specifically
          echo "Testing registry endpoint /v2/..."
          if curl -I --connect-timeout 10 --max-time 30 https://$REGISTRY_DOMAIN/v2/ 2>/dev/null; then
            echo "✅ Registry endpoint accessible via HTTPS"
          else
            echo "⚠️ Registry endpoint not accessible via HTTPS, trying HTTP..."
            if curl -I --connect-timeout 10 --max-time 30 http://$REGISTRY_DOMAIN/v2/ 2>/dev/null; then
              echo "✅ Registry endpoint accessible via HTTP"
            else
              echo "❌ Registry endpoint not accessible"
            fi
          fi

      - name: Login to external registry via Pinggy
        run: |
          echo "Logging in to registry at https://$REGISTRY_DOMAIN"
          echo "k8mX9pL2nQ7vR4wE" | docker login https://$REGISTRY_DOMAIN -u docker --password-stdin

      - name: Load and push image to external registry
        run: |
          # Load the built image
          docker load -i /tmp/teamhub.tar

          # Tag for external registry
          docker tag teamhub:${{ needs.prepare-tag.outputs.tag }} $REGISTRY_DOMAIN/teamhub:${{ needs.prepare-tag.outputs.tag }}
          docker tag teamhub:latest $REGISTRY_DOMAIN/teamhub:latest

          # Push to external registry with retry logic
          for i in {1..3}; do
            echo "Pushing images to external registry (attempt $i/3)..."
            if docker push $REGISTRY_DOMAIN/teamhub:${{ needs.prepare-tag.outputs.tag }} && docker push $REGISTRY_DOMAIN/teamhub:latest; then
              echo "Successfully pushed images to external registry"
              break
            else
              echo "Push failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

  deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout only docker-stack.yml
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-stack.yml
          sparse-checkout-cone-mode: false

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: teamhub-image
          path: /tmp

      - name: Load Docker image
        run: docker load -i /tmp/teamhub.tar

      - name: Login to local registry
        run: |
          echo "Logging in to local registry at localhost:5000"
          echo "k8mX9pL2nQ7vR4wE" | docker login localhost:5000 -u docker --password-stdin

      - name: Tag and push to local registry
        run: |
          docker tag teamhub:${{ needs.build-and-push.outputs.tag }} localhost:5000/teamhub:${{ needs.build-and-push.outputs.tag }}
          docker tag teamhub:latest localhost:5000/teamhub:latest

          # Push with retry logic
          for i in {1..3}; do
            echo "Pushing images to registry (attempt $i/3)..."
            if docker push localhost:5000/teamhub:${{ needs.build-and-push.outputs.tag }} && docker push localhost:5000/teamhub:latest; then
              echo "Successfully pushed images to registry"
              break
            else
              echo "Push failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: Update docker-stack.yml with new image tag
        run: |
          sed -i "s|localhost:5000/teamhub:.*|localhost:5000/teamhub:${{ needs.build-and-push.outputs.tag }}|" docker-stack.yml

      - name: Deploy full application stack
        run: |
          echo "Deploying full application stack (including teamhub)..."
          export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"

          # Update nginx config to full version with teamhub support
          cat > nginx-full.conf << 'EOF'
          events {
              worker_connections 1024;
          }

          http {
              upstream teamhub {
                  server teamhub:3000;
              }

              upstream registry {
                  server registry:5000;
              }

              upstream remotion {
                  server host.docker.internal:6000;
              }

              server {
                  listen 80;
                  server_name _;

                  # Main application
                  location / {
                      proxy_pass http://teamhub;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # Docker registry
                  location /v2/ {
                      proxy_pass http://registry;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;

                      # Docker registry specific headers
                      proxy_set_header X-Forwarded-Host $host;
                      proxy_buffering off;
                      client_max_body_size 0;
                  }

                  # Remotion service
                  location /remotion/ {
                      proxy_pass http://remotion/;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # Health check endpoint
                  location /health {
                      return 200 'OK\n';
                      add_header Content-Type text/plain;
                  }
              }
          }
          EOF

          # Update the docker-stack.yml to use the full nginx config
          sed -i 's/nginx-infra.conf/nginx-full.conf/g' docker-stack.yml

          # Deploy the full stack (this will update existing services without downtime)
          docker stack deploy -c docker-stack.yml teamhub

          echo "Waiting for teamhub service to be ready..."
          sleep 30

      - name: Prune stopped containers
        run: docker container prune -f

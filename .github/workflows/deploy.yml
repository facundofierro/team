name: Deploy to Self-Hosted Server

on:
  push:
    branches:
      - main

jobs:
  prepare-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Set commit SHA as output
        id: set_tag
        run: echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  setup-registry:
    runs-on: self-hosted
    needs: prepare-tag
    steps:
      - name: Checkout only required files
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-stack.yml
            setup-registry.sh
          sparse-checkout-cone-mode: false

      - name: Check and ensure registry is running
        run: |
          # Check if registry volumes exist
          if ! docker volume ls --filter name=registry_data --format "{{.Name}}" | grep -q registry_data; then
            echo "Registry volumes not found. Running setup script..."
            chmod +x setup-registry.sh
            ./setup-registry.sh
          fi

          # Check if registry service exists and is running
          if ! docker service ls --filter name=teamhub_registry --format "{{.Name}}" | grep -q teamhub_registry; then
            echo "Registry service not found. Deploying registry first..."
            export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
            docker stack deploy -c docker-stack.yml teamhub
            echo "Waiting for registry to be ready..."
            sleep 30
          else
            echo "Registry service exists. Checking if it's healthy..."
            # Wait for registry to be accessible
            for i in {1..10}; do
              if curl -f --connect-timeout 5 --max-time 10 -u docker:k8mX9pL2nQ7vR4wE http://127.0.0.1:5000/v2/ >/dev/null 2>&1; then
                echo "Registry is accessible"
                break
              fi
              echo "Waiting for registry to be ready... (attempt $i/10)"
              sleep 5
            done

            # Final check
            if ! curl -f --connect-timeout 5 --max-time 10 -u docker:k8mX9pL2nQ7vR4wE http://127.0.0.1:5000/v2/ >/dev/null 2>&1; then
              echo "Registry is not accessible. Redeploying stack..."
              export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
              docker stack deploy -c docker-stack.yml teamhub
              echo "Waiting for registry to be ready after redeploy..."
              sleep 30
            fi
          fi

      - name: Ensure Pinggy tunnels are running
        run: |
          # Main app tunnel (port 443 -> 3000)
          if ! docker ps --filter "name=pinggy-tunnel" --filter "status=running" --format "{{.Names}}" | grep -q "^pinggy-tunnel$"; then
            echo "Main tunnel not running, setting it up..."
            # Stop and remove any existing container (running or stopped)
            docker stop pinggy-tunnel 2>/dev/null || true
            docker rm pinggy-tunnel 2>/dev/null || true
            docker run --net=host --name=pinggy-tunnel -d pinggy/pinggy -p 443 -R0:192.168.88.135:3000 -o StrictHostKeyChecking=no -o ServerAliveInterval=30 FpyP2PGUXy0@pro.pinggy.io
            echo "Waiting for main tunnel to be ready..."
            sleep 10
          else
            echo "Main Pinggy tunnel is already running."
          fi

          # Registry tunnel (port 5000 -> 5000) - for external access from GitHub
          if ! docker ps --filter "name=pinggy-registry-tunnel" --filter "status=running" --format "{{.Names}}" | grep -q "^pinggy-registry-tunnel$"; then
            echo "Registry tunnel not running, setting it up..."
            # Stop and remove any existing container (running or stopped)
            docker stop pinggy-registry-tunnel 2>/dev/null || true
            docker rm pinggy-registry-tunnel 2>/dev/null || true
            docker run --net=host --name=pinggy-registry-tunnel -d pinggy/pinggy -p 5000 -R0:192.168.88.135:5000 -o StrictHostKeyChecking=no -o ServerAliveInterval=30 FpyP2PGUXy0@pro.pinggy.io
            echo "Waiting for registry tunnel to be ready..."
            sleep 15
          else
            echo "Registry Pinggy tunnel is already running."
          fi

          # Clean up any orphaned pinggy containers (containers without proper names)
          echo "Cleaning up orphaned pinggy containers..."
          docker ps -a --filter "ancestor=pinggy/pinggy" --format "{{.Names}}" | grep -v -E "^(pinggy-tunnel|pinggy-registry-tunnel)$" | xargs -r docker rm -f

  build-and-push:
    runs-on: ubuntu-latest
    needs: [prepare-tag, setup-registry]
    outputs:
      tag: ${{ needs.prepare-tag.outputs.tag }}
    env:
      # Registry accessible from GitHub via Pinggy domain on port 5000
      REGISTRY_DOMAIN: 'ukjhwjyazp.a.pinggy.link:5000'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/teamhub/Dockerfile
          push: false
          tags: |
            teamhub:latest
            teamhub:${{ needs.prepare-tag.outputs.tag }}
          outputs: type=docker,dest=/tmp/teamhub.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: teamhub-image
          path: /tmp/teamhub.tar
          retention-days: 1

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Login to external registry via Pinggy
        run: |
          echo "Logging in to registry at https://$REGISTRY_DOMAIN"
          echo "k8mX9pL2nQ7vR4wE" | docker login https://$REGISTRY_DOMAIN -u docker --password-stdin

      - name: Load and push image to external registry
        run: |
          # Load the built image
          docker load -i /tmp/teamhub.tar

          # Tag for external registry
          docker tag teamhub:${{ needs.prepare-tag.outputs.tag }} $REGISTRY_DOMAIN/teamhub:${{ needs.prepare-tag.outputs.tag }}
          docker tag teamhub:latest $REGISTRY_DOMAIN/teamhub:latest

          # Push to external registry with retry logic
          for i in {1..3}; do
            echo "Pushing images to external registry (attempt $i/3)..."
            if docker push $REGISTRY_DOMAIN/teamhub:${{ needs.prepare-tag.outputs.tag }} && docker push $REGISTRY_DOMAIN/teamhub:latest; then
              echo "Successfully pushed images to external registry"
              break
            else
              echo "Push failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

  deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout only docker-stack.yml
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-stack.yml
          sparse-checkout-cone-mode: false

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: teamhub-image
          path: /tmp

      - name: Load Docker image
        run: docker load -i /tmp/teamhub.tar

      - name: Login to local registry
        run: |
          echo "Logging in to local registry at localhost:5000"
          echo "k8mX9pL2nQ7vR4wE" | docker login localhost:5000 -u docker --password-stdin

      - name: Tag and push to local registry
        run: |
          docker tag teamhub:${{ needs.build-and-push.outputs.tag }} localhost:5000/teamhub:${{ needs.build-and-push.outputs.tag }}
          docker tag teamhub:latest localhost:5000/teamhub:latest

          # Push with retry logic
          for i in {1..3}; do
            echo "Pushing images to registry (attempt $i/3)..."
            if docker push localhost:5000/teamhub:${{ needs.build-and-push.outputs.tag }} && docker push localhost:5000/teamhub:latest; then
              echo "Successfully pushed images to registry"
              break
            else
              echo "Push failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: Update docker-stack.yml with new image tag
        run: |
          sed -i "s|localhost:5000/teamhub:.*|localhost:5000/teamhub:${{ needs.build-and-push.outputs.tag }}|" docker-stack.yml

      - name: Deploy Docker stack
        run: |
          export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
          docker stack deploy -c docker-stack.yml teamhub

      - name: Prune stopped containers
        run: docker container prune -f

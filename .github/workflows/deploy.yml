name: Deploy to Self-Hosted Server

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_redeploy:
        description: 'Force redeploy infrastructure (ignores existing services)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  prepare-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Set commit SHA as output
        id: set_tag
        run: echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare-tag
    outputs:
      tag: ${{ needs.prepare-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/teamhub/Dockerfile.distroless
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/teamhub:latest
            ghcr.io/${{ github.repository_owner }}/teamhub:${{ needs.prepare-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout required files
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            infrastructure/
          sparse-checkout-cone-mode: false

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CICD }}

      - name: Display deployment configuration
        run: |
          echo "🔧 Deployment Configuration:"
          echo "  - Container Registry: ghcr.io/${{ github.repository_owner }}"
          echo "  - Image Tag: ${{ needs.build-and-push.outputs.tag }}"
          echo "  - Remotion Image: ghcr.io/facundofierro/kadiel-learning/remotion-render:latest"
          echo "  - Force Redeploy: ${{ github.event.inputs.force_redeploy || 'false' }}"
          echo "  - Trigger: ${{ github.event_name }}"

      - name: Setup Pinggy tunnel
        run: |
          echo "🌐 Setting up Pinggy tunnel for main application..."

          # Check if main app tunnel is already running
          if docker ps --filter "name=pinggy-tunnel" --filter "status=running" | grep -q pinggy-tunnel; then
            echo "✅ Pinggy tunnel is already running"
            docker logs --tail 5 pinggy-tunnel 2>/dev/null || true
          else
            echo "🚀 Starting Pinggy tunnel..."

            # Remove any stopped tunnel container
            docker rm -f pinggy-tunnel 2>/dev/null || true

            # Start main app tunnel (port 443 -> nginx port 80)
            docker run --net=host --name=pinggy-tunnel -d pinggy/pinggy \
              -p 443 -R0:192.168.88.135:80 \
              -o StrictHostKeyChecking=no -o ServerAliveInterval=30 \
              FpyP2PGUXy0@pro.pinggy.io

            echo "⏳ Waiting for tunnel to establish connection..."
            sleep 15

            # Check tunnel status
            if docker ps --filter "name=pinggy-tunnel" --filter "status=running" | grep -q pinggy-tunnel; then
              echo "✅ Pinggy tunnel established successfully"
              echo "🔗 Tunnel logs:"
              docker logs --tail 10 pinggy-tunnel 2>/dev/null || true
            else
              echo "❌ Failed to establish Pinggy tunnel"
              docker logs pinggy-tunnel 2>/dev/null || true
              exit 1
            fi
          fi

      - name: Deploy application stack
        env:
          SUDO_PASSWORD: ${{ secrets.SUDO }}
        run: |
          chmod +x infrastructure/scripts/deploy-application.sh
          export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
          export NEXTCLOUD_ADMIN_PASSWORD="${{ secrets.NEXTCLOUD_ADMIN_PASSWORD }}"
          export NEXTCLOUD_DB_PASSWORD="${{ secrets.NEXTCLOUD_DB_PASSWORD }}"
          export CONTAINER_REGISTRY="ghcr.io/${{ github.repository_owner }}"
          export FORCE_REDEPLOY="${{ github.event.inputs.force_redeploy || 'false' }}"
          export REMOTION_IMAGE="ghcr.io/facundofierro/kadiel-learning/remotion-render:latest"

          infrastructure/scripts/deploy-application.sh ${{ needs.build-and-push.outputs.tag }}

      - name: Verify Pinggy tunnel after deployment
        run: |
          echo "🔍 Verifying Pinggy tunnel status..."

          if docker ps --filter "name=pinggy-tunnel" --filter "status=running" | grep -q pinggy-tunnel; then
            echo "✅ Pinggy tunnel is running"
            echo "🌐 Application should be accessible at: https://ukjhwjyazp.a.pinggy.link"
            echo "📋 Service URLs:"
            echo "  - Main App: https://ukjhwjyazp.a.pinggy.link/"
            echo "  - Remotion: https://ukjhwjyazp.a.pinggy.link/remotion/"
            echo "  - Nextcloud: https://ukjhwjyazp.a.pinggy.link/nextcloud/"
            echo "  - Health Check: https://ukjhwjyazp.a.pinggy.link/health"
          else
            echo "⚠️  Pinggy tunnel is not running"
            echo "🔍 Checking tunnel logs:"
            docker logs pinggy-tunnel 2>/dev/null || echo "No logs available"
          fi

      - name: Run health check
        run: |
          chmod +x infrastructure/scripts/health-check.sh
          echo "🏥 Running post-deployment health check..."
          infrastructure/scripts/health-check.sh

  cleanup-old-images:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'teamhub'
          package-type: 'container'
          min-versions-to-keep: 2
          delete-only-untagged-versions: false
